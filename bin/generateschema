#!/usr/local/bin/python

# Copied from pyxbgen 1.2.3

import pyxb.xmlschema
import pyxb.binding.generate
import pyxb.utils.utility
import pyxb.utils.domutils
#schemaroot="http://localhost:8081/rf2/xsd/"
# schemaroot="../../rf2service
schemaroot="../../rf2service/static/xsd/"

cmdline = '--schema-root %s -u rf2.xsd -m rf2 --binding-root=../rf2db/schema' % schemaroot

import logging
logging.basicConfig()
log_ = logging.getLogger(__name__)


generator = pyxb.binding.generate.Generator()
parser = generator.optionParser()

(options, args) = parser.parse_args(cmdline.split())

generator.applyOptionValues(options, args)

generator.resolveExternalSchema()

if 0 == len(generator.namespaces()):
    parser.print_help()
    sys.exit(1)

import sys
import traceback

# Save binding source first, so name-in-binding is stored in the
# parsed schema file
try:
    tns = generator.namespaces().pop()
    modules = generator.bindingModules()
    print('Python for %s requires %d modules' % (tns, len(modules)))

    top_module = None
    path_dirs = set()
    for m in modules:
        m.writeToModuleFile()

    generator.writeNamespaceArchive()
except Exception as e:
    print('Exception generating bindings: %s' % (e,))
    traceback.print_exception(*sys.exc_info())
    sys.exit(3)

# LocalVariables:
# mode:python
# End:
