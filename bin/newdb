#!/usr/local/bin/python
# -*- coding: utf-8 -*-
# Copyright (c) 2013, Mayo Clinic
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
#     Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the following disclaimer.
#
#     Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#
#     Neither the name of the Mayo Clinic nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.
import sys
import argparse
import os

# Assuming that we are running in the bin directory
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
sys.path.append(os.path.join(_curdir, '..'))
# TODO: Make this into a package
sys.path.append(os.path.join(_curdir, '..', '..', 'ConfigManager'))

from rf2db.db.RF2DBConnection import config_parms, debug_parms, cp_values, db_values, RF2DBConnection

helpargs = ['-h', '-?']


def main(argv):
    """ Create a MySQL database for RF2 files and/or manage the connection parameters.  Example sequence:
    * python newdb --upd ../../rf2service/settings.conf --host localhost --db rf220140731 --charset utf8 --user root --passwd pw
    * python newdb --show ../../rf2service/settings.conf
    * python newdb --create ../../rf2service/settings.conf
    """

    parser = argparse.ArgumentParser(description="Set up RF2 DB parameters and optionally create a database")
    parser.add_argument('configfile', help="configuration file location")
    parser.add_argument('--show', dest='show', action="store_true", help="show current configuration")
    parser.add_argument('--upd', dest='update', action="store_true", help="update configuration file")
    parser.add_argument('--create', action="store_true", help="create database if it doesn't exist")

    # Can't do a lot more if there isn't configuration file
    if len(argv) == 0 or (len(argv) == 1 and argv[0] in helpargs):
        config_parms.add_to_parser(parser)
        debug_parms.add_to_parser(parser)
        parser.parse_args(argv)
        return

    # There is (or should be) a configuration file -- pick it out of the arguments and then reparse
    args = [e for e in argv if e not in helpargs]
    fileopt, _ = parser.parse_known_args(args)

    # Open the existing configuration file so we know what the defaults should be
    cp_values.set_configfile(fileopt.configfile)
    config_parms.add_to_parser(parser, cp_values)
    debug_parms.add_to_parser(parser, db_values)

    opts = parser.parse_args(argv)

    cp_values.update(vars(opts))
    if opts.show:
        print(str(cp_values))
    if opts.update or not opts.show:
        if cp_values.flush():
            print("\nConfiguration file updated")
    if opts.create:
        RF2DBConnection().newDB()
        print("Database %s created in %s" % (cp_values.db, cp_values.host + ((':' + cp_values.port) if cp_values.port else '')))


if __name__ == '__main__':
    main(sys.argv[1:])
