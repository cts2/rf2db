#!/usr/local/bin/python
# -*- coding: utf-8 -*-
# Copyright (c) 2014, Mayo Clinic
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
#     Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the following disclaimer.
#
#     Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#
#     Neither the name of the Mayo Clinic nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.
import sys
import argparse
import os

# Assuming that we are running in the bin directory
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
sys.path.append(os.path.join(_curdir, '..'))
# TODO: Make this into a package
sys.path.append(os.path.join(_curdir, '..', '..', 'ConfigManager'))


from rf2db.db import RF2ConceptFile, RF2DescriptionFile, RF2DescriptionTextFile, RF2LanguageFile, RF2RelationshipFile
from rf2db.db import RF2SimpleMapFile, RF2SimpleReferencesetFile, RF2ModuleVersionsFile
from rf2db.db import RF2TransitiveClosure, RF2TransitiveClosureCanonical, CTS2Entity
from rf2db.db import RF2TransitiveChildren, RF2TransitiveChildrenCanonical, RF2ComplexMapFile
from rf2db.db import RF2ModuleDependencyFile, RF2ChangeSetFile
from rf2db.db import RF2PnAndFSN
from rf2db.db import RF1CanonicalCore
from rf2db.db.RF2FileCommon import config_parms, rf2_values

helpargs = ['-h', '-?']

# NOTE: Remember the closing comma on the tuples
load_sections = [
    ('changeset', (RF2ChangeSetFile.ChangeSetDB, )),
    ('concept', (RF2ConceptFile.ConceptDB,)),
    ('description', (RF2DescriptionFile.DescriptionDB, RF2DescriptionTextFile.DescriptionTextDB,)),
    ('language', (RF2LanguageFile.LanguageDB,)),
    ('relationship', (RF2RelationshipFile.StatedRelationshipDB, RF2RelationshipFile.RelationshipDB,)),
    ('simplemap', (RF2SimpleMapFile.SimpleMapDB,)),
    ('complexmap', (RF2ComplexMapFile.ComplexMapDB,)),
    ('simplerefset', (RF2SimpleReferencesetFile.SimpleReferencesetDB,)),
    ('moduleversions', (RF2ModuleVersionsFile.ModuleVersionsDB,)),
    ('moduledependency', (RF2ModuleDependencyFile.ModuleDependencyDB,)),
    ('pnandfsn', (RF2PnAndFSN.PNandFSNDB,)),
    ('transitive', (RF2TransitiveClosure.TransitiveClosureDB,)),
    ('cts2_entity', (CTS2Entity.CTS2EntityDB,)),
    ('transitive_children', (RF2TransitiveChildren.TransitiveChildrenDB,))]

canonical_sections = [
    ('canonical', (RF1CanonicalCore.CanonicalCoreDB,)),
    ('transitive_c', (RF2TransitiveClosureCanonical.TransitiveClosureCanonicalDB,)),
    ('transitive_children_c', (RF2TransitiveChildrenCanonical.TransitiveChildrenCanonicalDB,))]


def load_file(loader, opts, cfg):
    rf2file = loader(noaction=True)
    if opts.drop:
        print("Dropping " + rf2file._fname)
        rf2file.dropTable()
    if opts.drop or not rf2file.exists():
        print("Creating " + rf2file._fname)
        rf2file.create()
    elif not opts.notruncate:
        print("Truncating " + rf2file._fname)
        rf2file.truncateTable()
    print("Loading " + rf2file._fname)
    rf2file.loadTable(rf2file)



def main(args):
    """ Load a set of RF2 tables into an existing database.  The configuration is maintained with the <i>newdb</i>
    utility, although it can be edited manually.
    """
    parser = argparse.ArgumentParser(description="Set up RF2 DB parameters and optionally create a database")
    parser.add_argument('configfile', help="Configuration file location")
    parser.add_argument('--files', nargs='+', help="RF2 files to load. If omitted, all are loaded",
                        choices=[e[0] for e in load_sections])
    parser.add_argument('--notruncate', help="To not truncate table(s) if present", action="store_true")
    parser.add_argument('-d', '--drop', help="Drop table(s) if present", action="store_true")
    parser.add_argument('--show', '-s', dest='show', action="store_true", help="show current configuration")
    parser.add_argument('--load', '-l', action="store_true", help="load the database")
    parser.add_argument('-c', '--canonical', action="store_true", help="load canonical files")

       # Can't do a lot more if there isn't configuration file
    if len(args) == 0 or (len(args) == 1 and args[0] in helpargs):
        config_parms.add_to_parser(parser)
        parser.parse_args(args)
        return

    opts = parser.parse_args(args)
    rf2_values.set_configfile(opts.configfile)
    config_parms.add_to_parser(parser, current=rf2_values)
    rf2_values.update(vars(opts))
    if rf2_values.flush():
        print("Configuration file updated")

    opts = parser.parse_args(args)
    if opts.show:
        print(str(rf2_values))
    if opts.load or opts.files:
        for e in load_sections:
            if not opts.files or e[0] in opts.files:
                for loader in e[1]:
                    load_file(loader, opts, rf2_values)
    # TODO: This hasn't been tested
    if opts.canonical:
        for e in canonical_sections:
            for loader in e[1]:
                load_file(loader, opts, rf2_values)


if __name__ == '__main__':
    main(sys.argv[1:])

